name: iOS Build and Deploy to TestFlight

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      target:
        description: 'Deployment Target'
        required: true
        default: 'testflight'
        type: choice
        options:
        - testflight
        - appstore
        
env:
  NODE_VERSION: '20'

jobs:
  build-and-deploy-ios:
    name: Build iOS
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get App Scheme
        id: app_scheme
        run: echo "APP_SCHEME=$(jq -r .expo.scheme app.json)" >> $GITHUB_ENV

      - name: Prebuild iOS project
        run: npx expo prebuild --platform ios --clean

      - name: Cache Xcode DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-

      - name: Import Code Signing Certificates
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.BUILD_CERTIFICATE_P12_BASE64 }}
          p12-password: ${{ secrets.P12_PASSWORD }}

      - name: Decode App Store Connect API Key
        run: |
          mkdir -p ~/private_keys
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY_P8_BASE64 }}" | base64 --decode > ~/private_keys/AuthKey_${{ secrets.APPLE_KEY_ID }}.p8
          chmod 600 ~/private_keys/AuthKey_${{ secrets.APPLE_KEY_ID }}.p8

      - name: Download Provisioning Profiles
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

      - name: Build iOS Archive
        run: |
          cd ios
          xcodebuild \
            -workspace ${{ env.APP_SCHEME }}.xcworkspace \
            -scheme ${{ env.APP_SCHEME }} \
            -configuration Release \
            -archivePath $HOME/${{ env.APP_SCHEME }}.xcarchive \
            -destination 'generic/platform=iOS' \
            -parallelizeTargets -quiet \
            CURRENT_PROJECT_VERSION=${{ github.run_number }} \
            PRODUCT_BUNDLE_IDENTIFIER=${{ secrets.BUNDLE_IDENTIFIER }} \
            DEVELOPMENT_TEAM=${{ secrets.APPLE_TEAM_ID }} \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="${{ secrets.PROVISIONING_PROFILE_NAME }}" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            -allowProvisioningUpdates \
            archive 
          cd ..

      - name: Upload Archive artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-archive
          path: ~/${{ env.APP_SCHEME }}.xcarchive
          retention-days: 7

      - name: Notify on success
        if: success()
        run: echo "✅ iOS archive build completed successfully!"

      - name: Notify on failure
        if: failure()
        run: echo "❌ iOS archive build failed. Check logs for details."
